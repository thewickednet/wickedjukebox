<?php

namespace Proxy\__CG__\WJB\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Group extends \WJB\Entity\Group implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setAdmin($admin)
    {
        $this->__load();
        return parent::setAdmin($admin);
    }

    public function getAdmin()
    {
        $this->__load();
        return parent::getAdmin();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setNocredits($nocredits)
    {
        $this->__load();
        return parent::setNocredits($nocredits);
    }

    public function getNocredits()
    {
        $this->__load();
        return parent::getNocredits();
    }

    public function setQueueAdd($queueAdd)
    {
        $this->__load();
        return parent::setQueueAdd($queueAdd);
    }

    public function getQueueAdd()
    {
        $this->__load();
        return parent::getQueueAdd();
    }

    public function setQueueRemove($queueRemove)
    {
        $this->__load();
        return parent::setQueueRemove($queueRemove);
    }

    public function getQueueRemove()
    {
        $this->__load();
        return parent::getQueueRemove();
    }

    public function setQueueSkip($queueSkip)
    {
        $this->__load();
        return parent::setQueueSkip($queueSkip);
    }

    public function getQueueSkip()
    {
        $this->__load();
        return parent::getQueueSkip();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setUsers($users)
    {
        $this->__load();
        return parent::setUsers($users);
    }

    public function getUsers()
    {
        $this->__load();
        return parent::getUsers();
    }

    public function toArray($deep = false)
    {
        $this->__load();
        return parent::toArray($deep);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'title', 'admin', 'nocredits', 'queueSkip', 'queueRemove', 'queueAdd', 'id', 'users');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}