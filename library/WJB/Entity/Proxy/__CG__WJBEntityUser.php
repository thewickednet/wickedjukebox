<?php

namespace Proxy\__CG__\WJB\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \WJB\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setIP($IP)
    {
        $this->__load();
        return parent::setIP($IP);
    }

    public function getIP()
    {
        $this->__load();
        return parent::getIP();
    }

    public function setAdded($added)
    {
        $this->__load();
        return parent::setAdded($added);
    }

    public function getAdded()
    {
        $this->__load();
        return parent::getAdded();
    }

    public function setChannel($channel)
    {
        $this->__load();
        return parent::setChannel($channel);
    }

    public function getChannel()
    {
        $this->__load();
        return parent::getChannel();
    }

    public function setCookie($cookie)
    {
        $this->__load();
        return parent::setCookie($cookie);
    }

    public function getCookie()
    {
        $this->__load();
        return parent::getCookie();
    }

    public function setCredits($credits)
    {
        $this->__load();
        return parent::setCredits($credits);
    }

    public function getCredits()
    {
        $this->__load();
        return parent::getCredits();
    }

    public function setDownloads($downloads)
    {
        $this->__load();
        return parent::setDownloads($downloads);
    }

    public function getDownloads()
    {
        $this->__load();
        return parent::getDownloads();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setFullname($fullname)
    {
        $this->__load();
        return parent::setFullname($fullname);
    }

    public function getFullname()
    {
        $this->__load();
        return parent::getFullname();
    }

    public function setGroup($group)
    {
        $this->__load();
        return parent::setGroup($group);
    }

    public function getGroup()
    {
        $this->__load();
        return parent::getGroup();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setPicture($picture)
    {
        $this->__load();
        return parent::setPicture($picture);
    }

    public function getPicture()
    {
        $this->__load();
        return parent::getPicture();
    }

    public function setProofOfLife($proofOfLife)
    {
        $this->__load();
        return parent::setProofOfLife($proofOfLife);
    }

    public function getProofOfLife()
    {
        $this->__load();
        return parent::getProofOfLife();
    }

    public function setProofOfListening($proofOfListening)
    {
        $this->__load();
        return parent::setProofOfListening($proofOfListening);
    }

    public function getProofOfListening()
    {
        $this->__load();
        return parent::getProofOfListening();
    }

    public function setSelects($selects)
    {
        $this->__load();
        return parent::setSelects($selects);
    }

    public function getSelects()
    {
        $this->__load();
        return parent::getSelects();
    }

    public function setSkips($skips)
    {
        $this->__load();
        return parent::setSkips($skips);
    }

    public function getSkips()
    {
        $this->__load();
        return parent::getSkips();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setVotes($votes)
    {
        $this->__load();
        return parent::setVotes($votes);
    }

    public function getVotes()
    {
        $this->__load();
        return parent::getVotes();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'username', 'password', 'cookie', 'fullname', 'email', 'credits', 'downloads', 'votes', 'skips', 'selects', 'added', 'proofOfLife', 'proofOfListening', 'picture', 'IP', 'id', 'group', 'channel');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}