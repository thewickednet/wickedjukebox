<?php

namespace Proxy\__CG__\WJB\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Song extends \WJB\Entity\Song implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setAdded($added)
    {
        $this->__load();
        return parent::setAdded($added);
    }

    public function getAdded()
    {
        $this->__load();
        return parent::getAdded();
    }

    public function setAlbum($album)
    {
        $this->__load();
        return parent::setAlbum($album);
    }

    public function getAlbum()
    {
        $this->__load();
        return parent::getAlbum();
    }

    public function setArtist($artist)
    {
        $this->__load();
        return parent::setArtist($artist);
    }

    public function getArtist()
    {
        $this->__load();
        return parent::getArtist();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setLocalpath($localpath)
    {
        $this->__load();
        return parent::setLocalpath($localpath);
    }

    public function getLocalpath()
    {
        $this->__load();
        return parent::getLocalpath();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTrackNo($trackNo)
    {
        $this->__load();
        return parent::setTrackNo($trackNo);
    }

    public function getTrackNo()
    {
        $this->__load();
        return parent::getTrackNo();
    }

    public function setDuration($duration)
    {
        $this->__load();
        return parent::setDuration($duration);
    }

    public function getDuration()
    {
        $this->__load();
        return parent::getDuration();
    }

    public function setLyrics($lyrics)
    {
        $this->__load();
        return parent::setLyrics($lyrics);
    }

    public function getLyrics()
    {
        $this->__load();
        return parent::getLyrics();
    }

    public function toArray($deep = false)
    {
        $this->__load();
        return parent::toArray($deep);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'title', 'localpath', 'lyrics', 'trackNo', 'duration', 'added', 'id', 'artist', 'album');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}