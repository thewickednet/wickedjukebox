[core]
dsn=mysql+pymysql://jukebox:jukebox@127.0.0.1:{{db_port}}/jukebox?charset=utf8

; -----------------------------------------------------------------------------
;    Component Configuration
; -----------------------------------------------------------------------------
;  The jukeox supports modular implementations for core behaviour. Each
;  component is configured via a section
;  [channel:<channel-name>:<component-name>]. See the documentation for
;  configuration details of each component.
;
;  Each section has at least a "type" option. This option selects the
;  underlying implementation of that component.
;
;  Each component supports a "null" type which disables that component
;  completely. For example, setting the "jingle" type to "null" will not add
;  any jingles to the queue and using a "null" type for the autoplay mode will
;  only play music if something is queued.
; -----------------------------------------------------------------------------

[channel:wicked:player]
; The player back-end is the part which actually produces sound.
type = mpd
host = 127.0.0.1
port = 6600

; If the MPD library root path is different from the root path of the jukebox
; (f.ex. when running MPD inside docker), set "path_map" to
; <jukebox_path>:<mpd_path>
path_map = {{sample_data_folder}}:/var/lib/mpd/music

[channel:wicked:ipc]
; The Inter-Process Call mechanism used to communicate from the frontend to the
; backend
type = db

[channel:wicked:autoplay]
; The model used to select a new song when nothing is queued.
type = smart_prefetch
max_duration = 450
proofoflife_timeout = 120
weight_last_played = 10
weight_never_played = 4
weight_randomness = 1
weight_song_age = 1
weight_user_rating = 4

[channel:wicked:queue]
; The model used to pick songs from a queue
type = db

[channel:wicked:jingle]
; The model used to select jingles
type = fs
root = /path/to/jingles
interval = 10


; vim: set filetype=cfg :
