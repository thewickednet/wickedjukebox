# Generated by Django 4.2.2 on 2023-06-24 15:47

import django.contrib.auth.models
import django.db.models.deletion
import django_countries.fields
import sorl.thumbnail.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("username", models.CharField(max_length=32, unique=True)),
                ("fullname", models.CharField(max_length=64)),
                ("email", models.CharField(max_length=128)),
                ("credits", models.IntegerField(default=0)),
                ("downloads", models.IntegerField(default=0)),
                ("votes", models.IntegerField(default=0)),
                ("skips", models.IntegerField(default=0)),
                ("selects", models.IntegerField(default=0)),
                ("added", models.DateTimeField(auto_now_add=True)),
                ("proof_of_life", models.DateTimeField(blank=True, null=True)),
                (
                    "proof_of_listening",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="Last IP Address",
                        null=True,
                        verbose_name="IP",
                    ),
                ),
                (
                    "picture",
                    sorl.thumbnail.fields.ImageField(
                        blank=True, null=True, upload_to=""
                    ),
                ),
                (
                    "pinned_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="fake the User's IP",
                        null=True,
                        verbose_name="Pinned IP",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Active"),
                ),
                (
                    "is_staff",
                    models.BooleanField(default=True, verbose_name="Staff"),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Album",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("release_date", models.DateField()),
                ("added", models.DateTimeField(auto_now_add=True)),
                ("downloaded", models.PositiveIntegerField(default=0)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Album", "Album"),
                            ("Movie Soundtrack", "Ost"),
                            ("Game Soundtrack", "Game"),
                            ("Various Artists", "Various"),
                        ],
                        max_length=32,
                    ),
                ),
                ("path", models.CharField(max_length=255)),
                (
                    "coverart",
                    sorl.thumbnail.fields.ImageField(
                        blank=True, max_length=255, null=True, upload_to=""
                    ),
                ),
            ],
            options={
                "ordering": ["-release_date", "name"],
            },
        ),
        migrations.CreateModel(
            name="Artist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                (
                    "country",
                    django_countries.fields.CountryField(
                        blank=True, max_length=2, null=True
                    ),
                ),
                ("bio", models.TextField()),
                (
                    "website",
                    models.URLField(blank=True, max_length=255, null=True),
                ),
                (
                    "wikipage",
                    models.URLField(blank=True, max_length=255, null=True),
                ),
                ("lastfm_mbid", models.CharField(max_length=64)),
                (
                    "photo",
                    sorl.thumbnail.fields.ImageField(
                        blank=True, max_length=255, null=True, upload_to=""
                    ),
                ),
                ("added", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Channel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.SlugField(max_length=32, unique=True)),
                ("public", models.BooleanField(default=True)),
                ("backend", models.CharField(max_length=64)),
                ("backend_params", models.TextField(blank=True, null=True)),
                ("ping", models.DateTimeField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("status", models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("lat", models.FloatField(blank=True, null=True)),
                ("lon", models.FloatField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="Playlist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32)),
                ("probability", models.FloatField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RenderPresets",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("category", models.CharField(max_length=64)),
                ("preset", models.CharField(max_length=64)),
                ("h_max", models.SmallIntegerField()),
                ("w_max", models.SmallIntegerField()),
                (
                    "placeholder",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("no_proportion", models.IntegerField()),
                ("force_mime", models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name="Song",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("track_no", models.PositiveSmallIntegerField(default=0)),
                ("title", models.CharField(max_length=128)),
                ("duration", models.FloatField(blank=True, null=True)),
                (
                    "year",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                ("localpath", models.CharField(max_length=255)),
                ("downloaded", models.PositiveIntegerField(default=0)),
                ("lastScanned", models.DateTimeField(blank=True, null=True)),
                ("bitrate", models.IntegerField(default=0)),
                ("filesize", models.PositiveBigIntegerField(default=0)),
                ("checksum", models.CharField(max_length=14)),
                ("lyrics", models.TextField()),
                ("broken", models.BooleanField(default=False)),
                ("dirty", models.BooleanField(default=False)),
                ("added", models.DateTimeField(auto_now_add=True)),
                ("available", models.BooleanField(default=True)),
                (
                    "album",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="songs",
                        to="core.album",
                    ),
                ),
                (
                    "artist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.artist",
                    ),
                ),
            ],
            options={
                "ordering": ["album", "track_no"],
            },
        ),
        migrations.CreateModel(
            name="Queue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField(blank=True, null=True)),
                ("added", models.DateTimeField(auto_now_add=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.channel",
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.song",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["channel", "position"],
            },
        ),
        migrations.CreateModel(
            name="DynamicPlaylist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("probability", models.FloatField()),
                (
                    "label",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("query", models.TextField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.channel",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="album",
            name="artist",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="albums",
                to="core.artist",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="channel",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="core.channel",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="UserSongStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("when", models.DateTimeField(auto_now_add=True)),
                (
                    "song",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.song",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "song", "when")},
            },
        ),
        migrations.CreateModel(
            name="UserSongStanding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "standing",
                    models.CharField(
                        choices=[("Love", "Love"), ("Hate", "Hate")],
                        max_length=4,
                    ),
                ),
                ("inserted", models.DateTimeField(auto_now=True)),
                (
                    "song",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.song",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "song")},
            },
        ),
        migrations.CreateModel(
            name="UserAlbumStats",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("when", models.DateTimeField(auto_now_add=True)),
                (
                    "album",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.album",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "album", "when")},
            },
        ),
        migrations.CreateModel(
            name="Setting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("var", models.CharField(max_length=32)),
                ("value", models.TextField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.channel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("var", "channel", "user")},
            },
        ),
        migrations.CreateModel(
            name="PlaylistSong",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField()),
                (
                    "playlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="songs",
                        to="core.playlist",
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.song",
                    ),
                ),
            ],
            options={
                "unique_together": {("playlist", "song")},
            },
        ),
        migrations.CreateModel(
            name="ChannelSongData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("played", models.PositiveIntegerField(default=0)),
                ("voted", models.PositiveIntegerField(default=0)),
                ("skipped", models.PositiveIntegerField(default=0)),
                ("last_played", models.DateTimeField(blank=True, null=True)),
                ("cost", models.IntegerField(blank=True, null=True)),
                (
                    "channel",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.channel",
                    ),
                ),
                (
                    "song",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.song",
                    ),
                ),
            ],
            options={
                "unique_together": {("channel", "song")},
            },
        ),
    ]
